#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Complete translation automation for HX documentation
"""

import os
import re
import json

# Complete translation dictionary for all HX documentation content
FULL_TRANSLATIONS = {
    # Navigation and headers
    "HX Documentation": "HX 文档",
    "Contents:": "目录：",
    "Installation": "安装",
    "Requirements": "要求",
    "Quick Start": "快速开始", 
    "API Reference": "API 参考",
    "Examples": "示例",
    "Advanced Features": "高级特性",
    "Features": "特性",
    "Usage": "用法",
    "Configuration": "配置",
    "Tutorial": "教程",
    "Getting Started": "开始使用",
    "Introduction": "介绍",
    "Overview": "概述",
    "Guides": "指南",
    "Reference": "参考",
    "Tutorials": "教程",
    "Community": "社区",
    "Contributing": "贡献",
    "License": "许可证",
    "Changelog": "更新日志",
    "FAQ": "常见问题",
    "Troubleshooting": "故障排除",
    "Support": "支持",
    "Documentation": "文档",
    "Docs": "文档",
    "Home": "首页",
    "Index": "索引",
    "Search": "搜索",
    "Table of Contents": "目录",
    "Next": "下一页",
    "Previous": "上一页",
    "Edit on GitHub": "在 GitHub 上编辑",
    "View page source": "查看页面源码",
    "Indices and tables": "索引和表格",
    ":ref:`genindex`": ":ref:`genindex`",
    ":ref:`modindex`": ":ref:`modindex`", 
    ":ref:`search`": ":ref:`search`",

    # Main page content
    "Welcome to HX, a lightweight, flexible HTTP framework for Go that simplifies request handling and data extraction.": "欢迎使用 HX，一个轻量级、灵活的 Go HTTP 框架，简化请求处理和数据提取。",
    "🚀 **Lightweight and fast** - Minimal overhead with maximum performance": "🚀 **轻量快速** - 最小开销，最大性能",
    "💪 **Type-safe request data extraction** - Compile-time safety for request handling": "💪 **类型安全的请求数据提取** - 请求处理的编译时安全性",
    "🔄 **Automatic request binding** - Seamless data binding from various sources": "🔄 **自动请求绑定** - 来自各种来源的无缝数据绑定", 
    "🛠 **Extensible design** - Easy to extend and customize": "🛠 **可扩展设计** - 易于扩展和自定义",
    "Go 1.24 or higher": "Go 1.24 或更高版本",

    # Installation content
    "HX requires Go 1.24 or higher.": "HX 需要 Go 1.24 或更高版本。",
    "Installing HX": "安装 HX",
    "To install HX, use ``go get``:": "要安装 HX，请使用 ``go get``：",
    "Import HX in your Go code:": "在您的 Go 代码中导入 HX：",
    "Verifying Installation": "验证安装",
    "Create a simple test file to verify your installation:": "创建一个简单的测试文件来验证您的安装：",
    "Run the file and visit http://localhost:8080/hello to see if HX is working correctly.": "运行文件并访问 http://localhost:8080/hello 以查看 HX 是否正常工作。",

    # Quick Start content  
    "This guide will help you get started with HX quickly. You'll learn the basic concepts and create your first HX application.": "本指南将帮助您快速开始使用 HX。您将学习基本概念并创建您的第一个 HX 应用程序。",
    "Basic Concepts": "基本概念",
    "HX is built around several key concepts:": "HX 围绕几个关键概念构建：",
    "Type-safe handlers": "类型安全处理器",
    "Functions that accept typed request data and return typed responses": "接受类型化请求数据并返回类型化响应的函数",
    "Request extraction": "请求提取", 
    "Automatic binding of request data to Go structs": "请求数据到 Go 结构体的自动绑定",
    "Response rendering": "响应渲染",
    "Automatic serialization of responses to various formats": "响应到各种格式的自动序列化",
    "Middleware": "中间件",
    "Composable request processing pipeline": "可组合的请求处理流水线",
    "Your First HX Application": "您的第一个 HX 应用程序",
    "Let's create a simple REST API that demonstrates HX's core features:": "让我们创建一个简单的 REST API 来演示 HX 的核心特性：",
    "Define custom extractors for path and header values": "为路径和请求头值定义自定义提取器",
    "Request structure with automatic data extraction": "具有自动数据提取的请求结构",
    "Response structure": "响应结构",
    "Handler function with type safety": "具有类型安全的处理器函数",
    "Register a JSON endpoint": "注册一个 JSON 端点",
    "Test the application by visiting:": "通过访问以下地址测试应用程序：",
    "You should see a response like:": "您应该看到类似这样的响应：",
    
    # Request Data Extraction
    "Request Data Extraction": "请求数据提取",
    "HX provides several ways to extract data from HTTP requests:": "HX 提供了几种从 HTTP 请求中提取数据的方法：",
    "Query Parameters": "查询参数",
    "Form Data": "表单数据",
    "JSON Body": "JSON 主体", 
    "Path Parameters": "路径参数",
    "Headers": "请求头",
    "For route": "对于路由",
    "extracts the": "提取",
    "value": "值",

    # Response Formats
    "Response Formats": "响应格式", 
    "HX supports multiple response formats:": "HX 支持多种响应格式：",
    "JSON Response": "JSON 响应",
    "String Response": "字符串响应",
    "XML Response": "XML 响应",
    "The response will be automatically serialized to JSON format.": "响应将自动序列化为 JSON 格式。",
    "The response will be automatically serialized to XML format.": "响应将自动序列化为 XML 格式。",

    # Error Handling
    "Error Handling": "错误处理",
    "HX provides built-in error handling. Simply return an error from your handler:": "HX 提供内置的错误处理。只需从您的处理器返回一个错误：",
    "You can also customize error handling:": "您也可以自定义错误处理：",
    "Next Steps": "下一步",
    "Now that you understand the basics, explore these topics:": "现在您了解了基础知识，探索这些主题：",
    "Detailed API reference": "详细的 API 参考",
    "More examples and use cases": "更多示例和用例", 
    "Advanced features like middleware and custom extractors": "中间件和自定义提取器等高级特性",

    # API Reference
    "This section provides detailed documentation for all HX components.": "本节为所有 HX 组件提供详细文档。",
    "Core Types": "核心类型",
    "Router": "路由器",
    "The main router that handles HTTP request routing and middleware.": "处理 HTTP 请求路由和中间件的主路由器。",
    "Methods:": "方法：",
    "Creates a new router": "创建新路由器",
    "Creates a route group with path prefix": "创建带路径前缀的路由组",
    "Adds middleware to the router": "向路由器添加中间件",
    "Registers a route": "注册路由",
    "HTTP method shortcuts": "HTTP 方法快捷方式",
    "Route groups": "路由组",
    "Maps to": "映射到",
    "Standard handler function type that returns an error instead of void.": "返回错误而不是 void 的标准处理器函数类型。",
    "Generic handler function with type-safe request and response handling.": "具有类型安全请求和响应处理的通用处理器函数。",
    "Converts to JSON response handler": "转换为 JSON 响应处理器",
    "Converts to string response handler (Response must be string)": "转换为字符串响应处理器（响应必须是字符串）",
    "Converts to XML response handler": "转换为 XML 响应处理器",

    # Handler Creation Functions
    "Handler Creation Functions": "处理器创建函数", 
    "Creates a type-safe handler with specified Request and Response types.": "创建具有指定请求和响应类型的类型安全处理器。",
    "Example:": "示例：",
    "Creates a handler that returns a ResponseRender for custom response handling.": "创建返回 ResponseRender 的处理器用于自定义响应处理。",
    "Convenience function for handlers that don't require request data.": "不需要请求数据的处理器的便利函数。",

    # Request Extraction types
    "Extracts values from URL path parameters.": "从 URL 路径参数中提取值。",
    "Extracts values from URL query parameters.": "从 URL 查询参数中提取值。", 
    "Extracts values from HTTP headers.": "从 HTTP 请求头中提取值。",
    "Extracts values from form data.": "从表单数据中提取值。",
    "Extracts values from HTTP cookies.": "从 HTTP cookies 中提取值。",
    "Interface that extraction types must implement to specify the field name.": "提取类型必须实现的接口，用于指定字段名称。",

    # Response Types
    "Response Types": "响应类型",
    "Interface for custom response rendering.": "自定义响应渲染的接口。", 
    "Renders response as JSON.": "将响应渲染为 JSON。",
    "Renders response as plain text.": "将响应渲染为纯文本。",
    "Renders response as XML.": "将响应渲染为 XML。",
    "Function type for middleware that wraps handlers.": "包装处理器的中间件的函数类型。",
    "Chains multiple middleware functions together.": "将多个中间件函数链接在一起。",

    # Router Options
    "Router Options": "路由器选项",
    "Sets a custom error handler for the router.": "为路由器设置自定义错误处理器。",
    "Adds middleware to the router during creation.": "在创建期间向路由器添加中间件。",

    # Binding
    "Binding": "绑定",
    "Binds request data to the given interface using appropriate binders based on Content-Type.": "根据 Content-Type 使用适当的绑定器将请求数据绑定到给定接口。",
    "Interface for request data binding implementations.": "请求数据绑定实现的接口。",
    "Available binders:": "可用的绑定器：",
    "Binds JSON request bodies": "绑定 JSON 请求主体",
    "Binds XML request bodies": "绑定 XML 请求主体",
    "Binds form data (multipart and URL-encoded)": "绑定表单数据（multipart 和 URL 编码）", 
    "Binds URL query parameters": "绑定 URL 查询参数",
    "Function type for handling errors returned by handlers.": "处理由处理器返回的错误的函数类型。",
    "Default Error Handler:": "默认错误处理器：",

    # Utilities
    "Utilities": "工具",
    "Wraps a standard": "包装标准的",
    "into HX's": "到 HX 的",
    "into": "到",

    # Examples content
    "This section provides practical examples of using HX in various scenarios.": "本节提供在各种场景中使用 HX 的实际示例。",
    "REST API Example": "REST API 示例",
    "Here's a complete example of a REST API for managing users:": "这是一个管理用户的完整 REST API 示例：",
    "User model": "用户模型",
    "In-memory storage": "内存存储",
    "Extractors": "提取器",
    "Request types": "请求类型",
    "Handlers": "处理器",
    "Routes": "路由",
    "Test the API:": "测试 API：",
    "List users": "列出用户",
    "Create user": "创建用户",
    "Get user": "获取用户",
    "Update user": "更新用户", 
    "Delete user": "删除用户",
    "File Upload Example": "文件上传示例",
    "Middleware Example": "中间件示例",
    "Logging middleware": "日志中间件",
    "CORS middleware": "CORS 中间件",
    "Authentication middleware": "认证中间件",
    "Global middleware": "全局中间件",
    "Public routes": "公共路由",
    "Protected routes group": "受保护的路由组",
    "Test the middleware:": "测试中间件：",
    "Public endpoint (works)": "公共端点（有效）",
    "Protected endpoint without auth (fails)": "没有认证的受保护端点（失败）",
    "Protected endpoint with auth (works)": "有认证的受保护端点（有效）",
    "Custom Error Handling": "自定义错误处理",
    "Custom error types": "自定义错误类型",
    "Custom error handler": "自定义错误处理器",
    "JWT Authentication Example": "JWT 认证示例",
    "Simple JWT-like implementation (use a real JWT library in production)": "简单的类似 JWT 的实现（在生产环境中使用真正的 JWT 库）",
    "Request types": "请求类型",
    "Context key for user claims": "用户声明的上下文键",
    "JWT middleware": "JWT 中间件",
    "Public route": "公共路由",
    "Protected routes": "受保护的路由",

    # Advanced Features
    "This section covers advanced HX features for building sophisticated applications.": "本节介绍用于构建复杂应用程序的 HX 高级特性。",
    "Custom Request Extractors": "自定义请求提取器",
    "You can create custom extractors by implementing the": "您可以通过实现",
    "interface:": "接口来创建自定义提取器：",
    "Custom extractor for pagination": "分页的自定义提取器",
    "Set defaults": "设置默认值",
    "Extract page": "提取页码",
    "Extract limit": "提取限制",
    "Custom extractor for search filters": "搜索过滤器的自定义提取器",
    "Parse tags from comma-separated values": "从逗号分隔的值解析标签", 
    "Trim whitespace": "去除空白字符",
    "Request type using custom extractors": "使用自定义提取器的请求类型",
    "Mock results": "模拟结果",
    "Try:": "尝试：",
    "Custom Response Types": "自定义响应类型",
    "Implement the": "实现",
    "interface for custom response handling:": "接口用于自定义响应处理：",
    "CSV Response": "CSV 响应",
    "Write headers": "写入头部",
    "Write rows": "写入行",
    "PDF Response (simplified)": "PDF 响应（简化）",
    "Simple template rendering (use a real template engine in production)": "简单的模板渲染（在生产环境中使用真正的模板引擎）",
    "Template Response": "模板响应",
    "Mock PDF content": "模拟 PDF 内容",
    "Advanced Middleware Patterns": "高级中间件模式",
    "Rate Limiting Middleware": "速率限制中间件",
    "Clean old requests": "清理旧请求",
    "Check limit": "检查限制",
    "Add current request": "添加当前请求",
    "Circuit Breaker Middleware": "断路器中间件",
    "Check if we should reset": "检查是否应该重置",
    "Reject if circuit is open": "如果断路器打开则拒绝",
    "Execute request": "执行请求",
    "Request Context Enhancement": "请求上下文增强",
    "Context keys": "上下文键",
    "Request ID middleware": "请求 ID 中间件",
    "User context middleware": "用户上下文中间件",
    "Context data extracted successfully": "上下文数据提取成功",
    "Request Validation": "请求验证",
    "Validation interface": "验证接口",
    "Validation middleware": "验证中间件",
    "This middleware would need to be applied at the handler level": "此中间件需要在处理器级别应用",
    "for access to the typed request": "以访问类型化请求",
    "User creation request with validation": "带验证的用户创建请求",
    "Name validation": "名称验证",
    "Email validation": "邮箱验证",
    "Password validation": "密码验证",
    "Age validation": "年龄验证",
    "validation errors:": "验证错误：",
    "Validate request": "验证请求",
    "Process valid request": "处理有效请求",
    "User created successfully": "用户创建成功",
    "Test with:": "测试：",
    "Database Integration": "数据库集成",
    "Dependency injection middleware": "依赖注入中间件",
    "Initialize database": "初始化数据库",
    "Create table": "创建表",

    # Common phrases and connectors
    "and": "和",
    "or": "或",
    "the": "这个",
    "a": "一个",
    "an": "一个",
    "to": "到",
    "for": "为",
    "with": "与",
    "by": "通过",
    "from": "从",
    "of": "的",
    "in": "在",
    "on": "在",
    "at": "在",
    "is": "是",
    "are": "是",
    "will": "将",
    "can": "可以",
    "should": "应该",
    "must": "必须",
    "may": "可能",
    "if": "如果",
    "when": "当",
    "then": "然后",
    "else": "否则",
    "also": "也",
    "not": "不",
    "only": "只",
    "all": "所有",
    "any": "任何",
    "each": "每个",
    "both": "两个",
    "either": "任一",
    "neither": "都不",
    "some": "一些",
    "many": "许多",
    "most": "大多数",
    "few": "少数",
    "more": "更多",
    "less": "更少",
    "first": "第一",
    "last": "最后",
    "next": "下一个",
    "previous": "上一个",
    "before": "之前",
    "after": "之后",
    "during": "期间",
    "while": "当",
    "until": "直到",
    "since": "自从",
    "already": "已经",
    "still": "仍然",
    "yet": "还",
    "now": "现在",
    "then": "然后",
    "here": "这里",
    "there": "那里",
    "where": "哪里",
    "how": "如何",
    "why": "为什么",
    "what": "什么",
    "which": "哪个",
    "who": "谁",
    "when": "何时",
    "good": "好的",
    "bad": "坏的",
    "best": "最好的",
    "better": "更好的",
    "worse": "更坏的",
    "worst": "最坏的",
    "new": "新的",
    "old": "旧的",
    "same": "相同的",
    "different": "不同的",
    "similar": "相似的",
    "easy": "简单的",
    "hard": "困难的",
    "simple": "简单的",
    "complex": "复杂的",
    "important": "重要的",
    "useful": "有用的",
    "necessary": "必要的",
    "possible": "可能的",
    "impossible": "不可能的",
    "available": "可用的",
    "ready": "准备好的",
    "sure": "确定的",
    "clear": "清楚的",
    "correct": "正确的",
    "wrong": "错误的",
    "true": "真的",
    "false": "假的",
    "right": "正确的",
    "left": "左边的",
    "up": "向上",
    "down": "向下",
    "back": "返回",
    "forward": "向前",
    "inside": "内部",
    "outside": "外部",
    "above": "上面",
    "below": "下面",
    "between": "之间",
    "among": "在...中",
    "around": "周围",
    "through": "通过",
    "across": "穿过",
    "along": "沿着",
    "against": "反对",
    "without": "没有",
    "within": "在...内",
    "beyond": "超出",
    "near": "靠近",
    "far": "远的",
    "close": "关闭",
    "open": "打开",
    "start": "开始",
    "stop": "停止",
    "end": "结束",
    "begin": "开始",
    "finish": "完成",
    "continue": "继续",
    "break": "中断",
    "pause": "暂停",
    "wait": "等待",
    "go": "去",
    "come": "来",
    "get": "获取",
    "give": "给予",
    "take": "取得",
    "put": "放置",
    "make": "制作",
    "do": "做",
    "have": "有",
    "be": "是",
    "see": "看到",
    "look": "看",
    "find": "找到",
    "search": "搜索",
    "know": "知道",
    "think": "认为",
    "understand": "理解",
    "learn": "学习",
    "teach": "教授",
    "tell": "告诉",
    "say": "说",
    "speak": "说话",
    "talk": "谈话",
    "ask": "询问",
    "answer": "回答",
    "help": "帮助",
    "work": "工作",
    "play": "播放",
    "use": "使用",
    "try": "尝试",
    "test": "测试",
    "check": "检查",
    "verify": "验证",
    "confirm": "确认",
    "ensure": "确保",
    "require": "需要",
    "need": "需要",
    "want": "想要",
    "like": "喜欢",
    "love": "喜爱",
    "hate": "讨厌",
    "prefer": "偏好",
    "choose": "选择",
    "select": "选择",
    "pick": "挑选",
    "decide": "决定",
    "change": "改变",
    "modify": "修改",
    "update": "更新",
    "add": "添加",
    "remove": "移除",
    "delete": "删除",
    "create": "创建",
    "build": "构建",
    "develop": "开发",
    "design": "设计",
    "plan": "计划",
    "prepare": "准备",
    "setup": "设置",
    "configure": "配置",
    "install": "安装",
    "run": "运行",
    "execute": "执行",
    "process": "处理",
    "handle": "处理",
    "manage": "管理",
    "control": "控制",
    "operate": "操作",
    "function": "功能",
    "feature": "特性",
    "option": "选项",
    "setting": "设置",
    "parameter": "参数",
    "argument": "参数",
    "value": "值",
    "data": "数据",
    "information": "信息",
    "content": "内容",
    "text": "文本",
    "message": "消息",
    "error": "错误",
    "warning": "警告",
    "notice": "通知",
    "success": "成功",
    "failure": "失败",
    "result": "结果",
    "output": "输出",
    "input": "输入",
    "file": "文件",
    "folder": "文件夹",
    "directory": "目录",
    "path": "路径",
    "location": "位置",
    "address": "地址",
    "link": "链接",
    "connection": "连接",
    "network": "网络",
    "server": "服务器",
    "client": "客户端",
    "user": "用户",
    "account": "账户",
    "profile": "配置文件",
    "name": "名称",
    "title": "标题",
    "description": "描述",
    "summary": "摘要",
    "detail": "详情",
    "list": "列表",
    "table": "表格",
    "row": "行",
    "column": "列",
    "field": "字段",
    "property": "属性",
    "method": "方法",
    "function": "函数",
    "class": "类",
    "object": "对象",
    "instance": "实例",
    "variable": "变量",
    "constant": "常量",
    "type": "类型",
    "format": "格式",
    "style": "样式",
    "theme": "主题",
    "template": "模板",
    "layout": "布局",
    "structure": "结构",
    "pattern": "模式",
    "algorithm": "算法",
    "logic": "逻辑",
    "rule": "规则",
    "condition": "条件",
    "requirement": "要求",
    "specification": "规范",
    "standard": "标准",
    "protocol": "协议",
    "interface": "接口",
    "API": "API",
    "library": "库",
    "framework": "框架",
    "package": "包",
    "module": "模块",
    "component": "组件",
    "element": "元素",
    "item": "项目",
    "entity": "实体",
    "resource": "资源",
    "service": "服务",
    "application": "应用程序",
    "program": "程序",
    "software": "软件",
    "system": "系统",
    "platform": "平台",
    "environment": "环境",
    "context": "上下文",
    "scope": "范围",
    "level": "级别",
    "layer": "层",
    "section": "部分",
    "part": "部分",
    "piece": "片段",
    "unit": "单元",
    "group": "组",
    "set": "集合",
    "collection": "集合",
    "array": "数组",
    "sequence": "序列",
    "order": "顺序",
    "sort": "排序",
    "filter": "过滤",
    "search": "搜索",
    "match": "匹配",
    "compare": "比较",
    "merge": "合并",
    "split": "分割",
    "join": "连接",
    "combine": "组合",
    "separate": "分离",
    "divide": "分割",
    "share": "共享",
    "copy": "复制",
    "move": "移动",
    "transfer": "传输",
    "send": "发送",
    "receive": "接收",
    "load": "加载",
    "save": "保存",
    "store": "存储",
    "retrieve": "检索",
    "fetch": "获取",
    "download": "下载",
    "upload": "上传",
    "import": "导入",
    "export": "导出",
    "read": "读取",
    "write": "写入",
    "edit": "编辑",
    "modify": "修改",
    "update": "更新",
    "refresh": "刷新",
    "reload": "重新加载",
    "reset": "重置",
    "clear": "清除",
    "clean": "清理",
    "empty": "空的",
    "full": "满的",
    "complete": "完整的",
    "partial": "部分的",
    "total": "总计",
    "count": "计数",
    "number": "数字",
    "amount": "数量",
    "size": "大小",
    "length": "长度",
    "width": "宽度",
    "height": "高度",
    "depth": "深度",
    "weight": "重量",
    "speed": "速度",
    "time": "时间",
    "date": "日期",
    "year": "年",
    "month": "月",
    "week": "周",
    "day": "日",
    "hour": "小时",
    "minute": "分钟",
    "second": "秒",
    "moment": "时刻",
    "period": "期间",
    "duration": "持续时间",
    "interval": "间隔",
    "frequency": "频率",
    "rate": "速率",
    "ratio": "比率",
    "percentage": "百分比",
    "proportion": "比例",
    "scale": "规模",
    "range": "范围",
    "limit": "限制",
    "boundary": "边界",
    "edge": "边缘",
    "border": "边框",
    "margin": "边距",
    "padding": "填充",
    "space": "空间",
    "gap": "间隙",
    "distance": "距离",
    "position": "位置",
    "place": "地方",
    "spot": "位置",
    "point": "点",
    "line": "线",
    "curve": "曲线",
    "shape": "形状",
    "form": "形式",
    "image": "图像",
    "picture": "图片",
    "photo": "照片",
    "icon": "图标",
    "symbol": "符号",
    "sign": "标志",
    "mark": "标记",
    "label": "标签",
    "tag": "标签",
    "category": "类别",
    "type": "类型",
    "kind": "种类",
    "sort": "排序",
    "class": "类",
    "grade": "等级",
    "rank": "排名",
    "status": "状态",
    "state": "状态",
    "condition": "条件",
    "situation": "情况",
    "case": "情况",
    "scenario": "场景",
    "example": "示例",
    "sample": "样本",
    "demo": "演示",
    "test": "测试",
    "trial": "试验",
    "experiment": "实验",
    "practice": "实践",
    "exercise": "练习",
    "training": "培训",
    "tutorial": "教程",
    "guide": "指南",
    "manual": "手册",
    "documentation": "文档",
    "reference": "参考",
    "note": "注释",
    "comment": "评论",
    "remark": "备注",
    "explanation": "解释",
    "instruction": "说明",
    "direction": "方向",
    "step": "步骤",
    "procedure": "程序",
    "process": "过程",
    "workflow": "工作流程",
    "pipeline": "流水线",
    "sequence": "序列",
    "series": "系列",
    "chain": "链",
    "flow": "流程",
    "stream": "流",
    "path": "路径",
    "route": "路由",
    "way": "方式",
    "method": "方法",
    "approach": "方法",
    "technique": "技术",
    "strategy": "策略",
    "plan": "计划",
    "scheme": "方案",
    "design": "设计",
    "pattern": "模式",
    "model": "模型",
    "structure": "结构",
    "architecture": "架构",
    "framework": "框架",
    "foundation": "基础",
    "base": "基础",
    "core": "核心",
    "center": "中心",
    "main": "主要的",
    "primary": "主要的",
    "secondary": "次要的",
    "additional": "额外的",
    "extra": "额外的",
    "optional": "可选的",
    "required": "必需的",
    "mandatory": "强制的",
    "essential": "必要的",
    "basic": "基本的",
    "fundamental": "基础的",
    "advanced": "高级的",
    "expert": "专家的",
    "professional": "专业的",
    "standard": "标准的",
    "normal": "正常的",
    "regular": "常规的",
    "common": "常见的",
    "typical": "典型的",
    "usual": "通常的",
    "general": "一般的",
    "specific": "特定的",
    "particular": "特殊的",
    "special": "特殊的",
    "unique": "独特的",
    "individual": "个别的",
    "personal": "个人的",
    "private": "私有的",
    "public": "公共的",
    "global": "全局的",
    "local": "本地的",
    "remote": "远程的",
    "external": "外部的",
    "internal": "内部的",
    "native": "原生的",
    "custom": "自定义的",
    "default": "默认的",
    "automatic": "自动的",
    "manual": "手动的",
    "static": "静态的",
    "dynamic": "动态的",
    "active": "活动的",
    "inactive": "非活动的",
    "enabled": "启用的",
    "disabled": "禁用的",
    "visible": "可见的",
    "hidden": "隐藏的",
    "shown": "显示的",
    "displayed": "显示的",
    "rendered": "渲染的",
    "processed": "处理的",
    "executed": "执行的",
    "completed": "完成的",
    "finished": "完成的",
    "done": "完成",
    "ready": "准备好的",
    "pending": "待处理的",
    "waiting": "等待的",
    "loading": "加载中",
    "running": "运行中",
    "stopped": "停止的",
    "paused": "暂停的",
    "cancelled": "已取消",
    "failed": "失败的",
    "successful": "成功的",
    "valid": "有效的",
    "invalid": "无效的",
    "correct": "正确的",
    "incorrect": "不正确的",
    "accurate": "准确的",
    "precise": "精确的",
    "approximate": "大约的",
    "exact": "精确的",
    "close": "接近的",
    "near": "附近的",
    "far": "远的",
    "long": "长的",
    "short": "短的",
    "tall": "高的",
    "low": "低的",
    "high": "高的",
    "deep": "深的",
    "shallow": "浅的",
    "wide": "宽的",
    "narrow": "窄的",
    "thick": "厚的",
    "thin": "薄的",
    "heavy": "重的",
    "light": "轻的",
    "strong": "强的",
    "weak": "弱的",
    "hard": "硬的",
    "soft": "软的",
    "smooth": "光滑的",
    "rough": "粗糙的",
    "sharp": "锐利的",
    "dull": "钝的",
    "bright": "明亮的",
    "dark": "黑暗的",
    "clear": "清楚的",
    "unclear": "不清楚的",
    "clean": "干净的",
    "dirty": "脏的",
    "fresh": "新鲜的",
    "old": "旧的",
    "young": "年轻的",
    "mature": "成熟的",
    "early": "早的",
    "late": "晚的",
    "recent": "最近的",
    "current": "当前的",
    "present": "现在的",
    "past": "过去的",
    "future": "未来的",
    "previous": "以前的",
    "next": "下一个",
    "following": "跟随的",
    "leading": "领先的",
    "final": "最终的",
    "initial": "初始的",
    "original": "原始的",
    "modified": "修改的",
    "updated": "更新的",
    "changed": "改变的",
    "improved": "改进的",
    "enhanced": "增强的",
    "optimized": "优化的",
    "simplified": "简化的",
    "complex": "复杂的",
    "complicated": "复杂的",
    "difficult": "困难的",
    "easy": "简单的",
    "simple": "简单的",
    "quick": "快速的",
    "slow": "慢的",
    "fast": "快的",
    "instant": "即时的",
    "immediate": "立即的",
    "direct": "直接的",
    "indirect": "间接的",
    "straight": "直的",
    "curved": "弯曲的",
    "round": "圆的",
    "square": "方的",
    "flat": "平的",
    "solid": "固体的",
    "liquid": "液体的",
    "empty": "空的",
    "full": "满的",
    "complete": "完整的",
    "incomplete": "不完整的",
    "whole": "整个的",
    "partial": "部分的",
    "total": "总的",
    "overall": "总体的",
    "entire": "整个的",
    "maximum": "最大的",
    "minimum": "最小的",
    "average": "平均的",
    "typical": "典型的",
    "standard": "标准的",
    "regular": "常规的",
    "normal": "正常的",
    "unusual": "不寻常的",
    "strange": "奇怪的",
    "weird": "奇怪的",
    "odd": "奇怪的",
    "even": "偶数的",
    "equal": "相等的",
    "unequal": "不相等的",
    "same": "相同的",
    "different": "不同的",
    "similar": "相似的",
    "related": "相关的",
    "connected": "连接的",
    "linked": "链接的",
    "associated": "关联的",
    "independent": "独立的",
    "separate": "分离的",
    "isolated": "孤立的",
    "combined": "组合的",
    "mixed": "混合的",
    "pure": "纯的",
    "natural": "自然的",
    "artificial": "人工的",
    "real": "真实的",
    "fake": "假的",
    "virtual": "虚拟的",
    "physical": "物理的",
    "digital": "数字的",
    "electronic": "电子的",
    "mechanical": "机械的",
    "automatic": "自动的",
    "manual": "手动的",
    "online": "在线的",
    "offline": "离线的",
    "connected": "连接的",
    "disconnected": "断开的",
    "available": "可用的",
    "unavailable": "不可用的",
    "accessible": "可访问的",
    "inaccessible": "不可访问的",
    "open": "打开的",
    "closed": "关闭的",
    "locked": "锁定的",
    "unlocked": "解锁的",
    "secured": "安全的",
    "unsecured": "不安全的",
    "protected": "受保护的",
    "unprotected": "未受保护的",
    "safe": "安全的",
    "unsafe": "不安全的",
    "dangerous": "危险的",
    "risky": "有风险的",
    "stable": "稳定的",
    "unstable": "不稳定的",
    "reliable": "可靠的",
    "unreliable": "不可靠的",
    "consistent": "一致的",
    "inconsistent": "不一致的",
    "compatible": "兼容的",
    "incompatible": "不兼容的",
    "flexible": "灵活的",
    "rigid": "刚性的",
    "portable": "便携的",
    "scalable": "可扩展的",
    "maintainable": "可维护的",
    "reusable": "可重用的",
    "efficient": "高效的",
    "inefficient": "低效的",
    "effective": "有效的",
    "ineffective": "无效的",
    "productive": "高效的",
    "unproductive": "低效的",
    "useful": "有用的",
    "useless": "无用的",
    "helpful": "有帮助的",
    "harmful": "有害的",
    "beneficial": "有益的",
    "detrimental": "有害的",
    "positive": "积极的",
    "negative": "消极的",
    "favorable": "有利的",
    "unfavorable": "不利的",
    "convenient": "方便的",
    "inconvenient": "不方便的",
    "comfortable": "舒适的",
    "uncomfortable": "不舒适的",
    "pleasant": "愉快的",
    "unpleasant": "不愉快的",
    "satisfactory": "满意的",
    "unsatisfactory": "不满意的",
    "acceptable": "可接受的",
    "unacceptable": "不可接受的",
    "appropriate": "适当的",
    "inappropriate": "不适当的",
    "suitable": "合适的",
    "unsuitable": "不合适的",
    "relevant": "相关的",
    "irrelevant": "不相关的",
    "significant": "重要的",
    "insignificant": "不重要的",
    "meaningful": "有意义的",
    "meaningless": "无意义的",
    "valuable": "有价值的",
    "worthless": "无价值的",
    "expensive": "昂贵的",
    "cheap": "便宜的",
    "free": "免费的",
    "paid": "付费的",
    "commercial": "商业的",
    "non-commercial": "非商业的",
    "personal": "个人的",
    "business": "商业的",
    "professional": "专业的",
    "amateur": "业余的",
    "expert": "专家的",
    "beginner": "初学者的",
    "novice": "新手的",
    "experienced": "有经验的",
    "skilled": "熟练的",
    "unskilled": "不熟练的",
    "qualified": "合格的",
    "unqualified": "不合格的",
    "certified": "认证的",
    "uncertified": "未认证的",
    "licensed": "许可的",
    "unlicensed": "未许可的",
    "authorized": "授权的",
    "unauthorized": "未授权的",
    "legal": "合法的",
    "illegal": "非法的",
    "official": "官方的",
    "unofficial": "非官方的",
    "formal": "正式的",
    "informal": "非正式的",
    "strict": "严格的",
    "lenient": "宽松的",
    "precise": "精确的",
    "vague": "模糊的",
    "detailed": "详细的",
    "brief": "简短的",
    "comprehensive": "全面的",
    "limited": "有限的",
    "unlimited": "无限的",
    "restricted": "受限的",
    "unrestricted": "不受限的",
    "controlled": "受控的",
    "uncontrolled": "不受控的",
    "managed": "管理的",
    "unmanaged": "未管理的",
    "organized": "有组织的",
    "disorganized": "无组织的",
    "structured": "结构化的",
    "unstructured": "非结构化的",
    "formatted": "格式化的",
    "unformatted": "未格式化的",
    "standardized": "标准化的",
    "non-standard": "非标准的",
    "customized": "定制的",
    "generic": "通用的",
    "specific": "特定的",
    "general": "一般的",
    "abstract": "抽象的",
    "concrete": "具体的",
    "theoretical": "理论的",
    "practical": "实用的",
    "experimental": "实验的",
    "proven": "已证明的",
    "tested": "已测试的",
    "untested": "未测试的",
    "verified": "已验证的",
    "unverified": "未验证的",
    "confirmed": "已确认的",
    "unconfirmed": "未确认的",
    "approved": "已批准的",
    "unapproved": "未批准的",
    "accepted": "已接受的",
    "rejected": "已拒绝的",
    "included": "包含的",
    "excluded": "排除的",
    "required": "必需的",
    "optional": "可选的",
    "mandatory": "强制的",
    "voluntary": "自愿的",
    "forced": "强制的",
    "automatic": "自动的",
    "manual": "手动的",
    "interactive": "交互的",
    "passive": "被动的",
    "active": "主动的",
    "reactive": "反应的",
    "proactive": "主动的",
    "responsive": "响应的",
    "unresponsive": "无响应的",
    "sensitive": "敏感的",
    "insensitive": "不敏感的",
    "aware": "意识到的",
    "unaware": "未意识到的",
    "conscious": "有意识的",
    "unconscious": "无意识的",
    "deliberate": "故意的",
    "accidental": "意外的",
    "intentional": "有意的",
    "unintentional": "无意的",
    "planned": "计划的",
    "unplanned": "未计划的",
    "scheduled": "预定的",
    "unscheduled": "未预定的",
    "expected": "预期的",
    "unexpected": "意外的",
    "predictable": "可预测的",
    "unpredictable": "不可预测的",
    "certain": "确定的",
    "uncertain": "不确定的",
    "sure": "确定的",
    "unsure": "不确定的",
    "confident": "自信的",
    "doubtful": "怀疑的",
    "optimistic": "乐观的",
    "pessimistic": "悲观的",
    "hopeful": "有希望的",
    "hopeless": "无希望的",
    "promising": "有前途的",
    "discouraging": "令人沮丧的",
    "encouraging": "令人鼓舞的",
    "motivating": "激励的",
    "inspiring": "鼓舞人心的",
    "exciting": "令人兴奋的",
    "boring": "无聊的",
    "interesting": "有趣的",
    "uninteresting": "无趣的",
    "engaging": "吸引人的",
    "fascinating": "迷人的",
    "amazing": "令人惊奇的",
    "ordinary": "普通的",
    "extraordinary": "非凡的",
    "remarkable": "显著的",
    "unremarkable": "不显著的",
    "notable": "值得注意的",
    "outstanding": "杰出的",
    "excellent": "优秀的",
    "poor": "糟糕的",
    "superior": "优越的",
    "inferior": "劣等的",
    "perfect": "完美的",
    "imperfect": "不完美的",
    "flawless": "无瑕的",
    "flawed": "有缺陷的",
    "ideal": "理想的",
    "realistic": "现实的",
    "optimized": "优化的",
    "suboptimal": "次优的",
}

def fix_po_header(content):
    """Fix the PO file header to prevent parsing errors"""
    # Remove fuzzy flag
    content = re.sub(r'^#, fuzzy\n', '', content, flags=re.MULTILINE)
    
    # Fix header metadata
    header_fixes = [
        (r'"PO-Revision-Date: YEAR-MO-DA HO:MI\+ZONE\\n"', '"PO-Revision-Date: 2025-07-15 10:30+0800\\n"'),
        (r'"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n"', '"Last-Translator: eatmoreapple <dev@example.com>\\n"'),
        (r'"Language-Team: zh_CN <LL@li\.org>\\n"', '"Language-Team: zh_CN\\n"'),
        (r'"Language-Team: LANGUAGE <LL@li\.org>\\n"', '"Language-Team: zh_CN\\n"'),
        (r'"Report-Msgid-Bugs-To: EMAIL@ADDRESS\\n"', '"Report-Msgid-Bugs-To: \\n"'),
        (r'"Project-Id-Version: PROJECT VERSION\\n"', '"Project-Id-Version: HX \\n"'),
    ]
    
    for pattern, replacement in header_fixes:
        content = re.sub(pattern, replacement, content)
    
    return content

def translate_po_content(content, translations):
    """Apply translations to PO file content"""
    
    for english, chinese in translations.items():
        if not english or not chinese:
            continue
            
        # Escape special regex characters in the English text
        english_escaped = re.escape(english)
        
        # Pattern for single line msgid
        pattern_single = f'msgid "{english_escaped}"\nmsgstr ""'
        replacement_single = f'msgid "{english}"\nmsgstr "{chinese}"'
        content = re.sub(pattern_single, replacement_single, content, flags=re.MULTILINE)
        
        # Pattern for multiline msgid (starting with msgid "")
        if len(english) > 50:  # Only for longer strings that might be split
            pattern_multi = rf'msgid ""\n"[^"]*{re.escape(english[:20])}[^"]*"\nmsgstr ""'
            replacement_multi = f'msgid ""\n"{english}"\nmsgstr "{chinese}"'
            content = re.sub(pattern_multi, replacement_multi, content, flags=re.MULTILINE | re.DOTALL)
    
    return content

def process_po_file(file_path):
    """Process a single PO file with translations"""
    if not os.path.exists(file_path):
        print(f"❌ File not found: {file_path}")
        return False
        
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Fix header
        content = fix_po_header(content)
        
        # Apply translations
        content = translate_po_content(content, FULL_TRANSLATIONS)
        
        # Write back
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"✅ Translated: {os.path.basename(file_path)}")
        return True
        
    except Exception as e:
        print(f"❌ Error processing {file_path}: {e}")
        return False

def main():
    """Main translation function"""
    print("🚀 Starting complete HX documentation translation...")
    
    # List of all PO files to translate
    po_files = [
        'locale/zh_CN/LC_MESSAGES/index.po',
        'locale/zh_CN/LC_MESSAGES/installation.po', 
        'locale/zh_CN/LC_MESSAGES/quickstart.po',
        'locale/zh_CN/LC_MESSAGES/api.po',
        'locale/zh_CN/LC_MESSAGES/examples.po',
        'locale/zh_CN/LC_MESSAGES/advanced.po'
    ]
    
    success_count = 0
    total_files = len(po_files)
    
    for po_file in po_files:
        if process_po_file(po_file):
            success_count += 1
    
    print(f"\n📊 Translation Summary:")
    print(f"   ✅ Successfully translated: {success_count}/{total_files} files")
    print(f"   📝 Total translations applied: {len(FULL_TRANSLATIONS)}")
    
    if success_count == total_files:
        print("🎉 All translations completed successfully!")
        return True
    else:
        print("⚠️  Some translations failed. Check the errors above.")
        return False

if __name__ == "__main__":
    main()